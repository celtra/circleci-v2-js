// This file is auto-generated by @hey-api/openapi-ts

import { Client, createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { CreateContextData, CreateContextError, CreateContextResponse, ListContextsData, ListContextsError, ListContextsResponse, GetContextData, GetContextError, GetContextResponse, DeleteContextData, DeleteContextError, DeleteContextResponse, ListEnvironmentVariablesFromContextData, ListEnvironmentVariablesFromContextError, ListEnvironmentVariablesFromContextResponse, DeleteEnvironmentVariableFromContextData, DeleteEnvironmentVariableFromContextError, DeleteEnvironmentVariableFromContextResponse, AddEnvironmentVariableToContextData, AddEnvironmentVariableToContextError, AddEnvironmentVariableToContextResponse, GetProjectWorkflowsPageDataData, GetProjectWorkflowsPageDataError, GetProjectWorkflowsPageDataResponse, GetJobTimeseriesData, GetJobTimeseriesError, GetJobTimeseriesResponse, GetOrgSummaryDataData, GetOrgSummaryDataError, GetOrgSummaryDataResponse, GetAllInsightsBranchesData, GetAllInsightsBranchesError, GetAllInsightsBranchesResponse, GetFlakyTestsData, GetFlakyTestsError, GetFlakyTestsResponse, GetProjectWorkflowMetricsData, GetProjectWorkflowMetricsError, GetProjectWorkflowMetricsResponse, GetProjectWorkflowRunsData, GetProjectWorkflowRunsError, GetProjectWorkflowRunsResponse, GetProjectWorkflowJobMetricsData, GetProjectWorkflowJobMetricsError, GetProjectWorkflowJobMetricsResponse, GetWorkflowSummaryData, GetWorkflowSummaryError, GetWorkflowSummaryResponse, GetProjectWorkflowTestMetricsData, GetProjectWorkflowTestMetricsError, GetProjectWorkflowTestMetricsResponse, GetCurrentUserError, GetCurrentUserResponse, GetCollaborationsError, GetCollaborationsResponse, ListPipelinesData, ListPipelinesError, ListPipelinesResponse, ContinuePipelineData, ContinuePipelineError, ContinuePipelineResponse, GetPipelineByIdData, GetPipelineByIdError, GetPipelineByIdResponse, GetPipelineConfigByIdData, GetPipelineConfigByIdError, GetPipelineConfigByIdResponse, ListWorkflowsByPipelineIdData, ListWorkflowsByPipelineIdError, ListWorkflowsByPipelineIdResponse, GetProjectBySlugData, GetProjectBySlugError, GetProjectBySlugResponse, CreateCheckoutKeyData, CreateCheckoutKeyError, CreateCheckoutKeyResponse, ListCheckoutKeysData, ListCheckoutKeysError, ListCheckoutKeysResponse, DeleteCheckoutKeyData, DeleteCheckoutKeyError, DeleteCheckoutKeyResponse, GetCheckoutKeyData, GetCheckoutKeyError, GetCheckoutKeyResponse, ListEnvVarsData, ListEnvVarsError, ListEnvVarsResponse, CreateEnvVarData, CreateEnvVarError, CreateEnvVarResponse, DeleteEnvVarData, DeleteEnvVarError, DeleteEnvVarResponse, GetEnvVarData, GetEnvVarError, GetEnvVarResponse, GetJobDetailsData, GetJobDetailsError, GetJobDetailsResponse, CancelJobData, CancelJobError, CancelJobResponse, ListPipelinesForProjectData, ListPipelinesForProjectError, ListPipelinesForProjectResponse, TriggerPipelineData, TriggerPipelineError, TriggerPipelineResponse, ListMyPipelinesData, ListMyPipelinesError, ListMyPipelinesResponse, GetPipelineByNumberData, GetPipelineByNumberError, GetPipelineByNumberResponse, CreateScheduleData, CreateScheduleError, CreateScheduleResponse, ListSchedulesForProjectData, ListSchedulesForProjectError, ListSchedulesForProjectResponse, GetJobArtifactsData, GetJobArtifactsError, GetJobArtifactsResponse, GetTestsData, GetTestsError, GetTestsResponse, DeleteScheduleByIdData, DeleteScheduleByIdError, DeleteScheduleByIdResponse, UpdateScheduleData, UpdateScheduleError, UpdateScheduleResponse, GetScheduleByIdData, GetScheduleByIdError, GetScheduleByIdResponse, GetUserData, GetUserError, GetUserResponse, GetWebhooksData, GetWebhooksError, GetWebhooksResponse, CreateWebhookData, CreateWebhookError, CreateWebhookResponse, DeleteWebhookData, DeleteWebhookError, DeleteWebhookResponse, GetWebhookByIdData, GetWebhookByIdError, GetWebhookByIdResponse, UpdateWebhookData, UpdateWebhookError, UpdateWebhookResponse, GetWorkflowByIdData, GetWorkflowByIdError, GetWorkflowByIdResponse, ApprovePendingApprovalJobByIdData, ApprovePendingApprovalJobByIdError, ApprovePendingApprovalJobByIdResponse, CancelWorkflowData, CancelWorkflowError, CancelWorkflowResponse, ListWorkflowJobsData, ListWorkflowJobsError, ListWorkflowJobsResponse, RerunWorkflowData, RerunWorkflowError, RerunWorkflowResponse, DeleteOrgClaimsData, DeleteOrgClaimsError, DeleteOrgClaimsResponse, GetOrgClaimsData, GetOrgClaimsError, GetOrgClaimsResponse, PatchOrgClaimsData, PatchOrgClaimsError, PatchOrgClaimsResponse, DeleteProjectClaimsData, DeleteProjectClaimsError, DeleteProjectClaimsResponse, GetProjectClaimsData, GetProjectClaimsError, GetProjectClaimsResponse, PatchProjectClaimsData, PatchProjectClaimsError, PatchProjectClaimsResponse, GetDecisionLogsData, GetDecisionLogsError, GetDecisionLogsResponse, MakeDecisionData, MakeDecisionError, MakeDecisionResponse, GetDecisionSettingsData, GetDecisionSettingsError, GetDecisionSettingsResponse, SetDecisionSettingsData, SetDecisionSettingsError, SetDecisionSettingsResponse, GetDecisionLogData, GetDecisionLogError, GetDecisionLogResponse, GetDecisionLogPolicyBundleData, GetDecisionLogPolicyBundleError, GetDecisionLogPolicyBundleResponse, GetPolicyBundleData, GetPolicyBundleError, GetPolicyBundleResponse, CreatePolicyBundleData, CreatePolicyBundleError, CreatePolicyBundleResponse, GetPolicyDocumentData, GetPolicyDocumentError, GetPolicyDocumentResponse, GetContextRestrictionsData, GetContextRestrictionsError, GetContextRestrictionsResponse, CreateContextRestrictionData, CreateContextRestrictionError, CreateContextRestrictionResponse, DeleteContextRestrictionData, DeleteContextRestrictionError, DeleteContextRestrictionResponse, CreateProjectData, CreateProjectError, CreateProjectResponse, GetProjectSettingsData, GetProjectSettingsError, GetProjectSettingsResponse, PatchProjectSettingsData, PatchProjectSettingsError, PatchProjectSettingsResponse, CreateUsageExportData, CreateUsageExportError, CreateUsageExportResponse, GetUsageExportData, GetUsageExportError, GetUsageExportResponse } from './types.gen';

export const client: Client = createClient(createConfig());

/**
 * Create a new context
 * Creates a new context.
 */
export const createContext = (options?: Options<CreateContextData>) => { return (options?.client ?? client).post<CreateContextResponse, CreateContextError>({
    ...options,
    url: '/context'
}); };

/**
 * List contexts
 * List all contexts for an owner.
 */
export const listContexts = (options?: Options<ListContextsData>) => { return (options?.client ?? client).get<ListContextsResponse, ListContextsError>({
    ...options,
    url: '/context'
}); };

/**
 * Get a context
 * Returns basic information about a context.
 */
export const getContext = (options: Options<GetContextData>) => { return (options?.client ?? client).get<GetContextResponse, GetContextError>({
    ...options,
    url: '/context/{context-id}'
}); };

/**
 * Delete a context
 */
export const deleteContext = (options: Options<DeleteContextData>) => { return (options?.client ?? client).delete<DeleteContextResponse, DeleteContextError>({
    ...options,
    url: '/context/{context-id}'
}); };

/**
 * List environment variables
 * List information about environment variables in a context, not including their values.
 */
export const listEnvironmentVariablesFromContext = (options: Options<ListEnvironmentVariablesFromContextData>) => { return (options?.client ?? client).get<ListEnvironmentVariablesFromContextResponse, ListEnvironmentVariablesFromContextError>({
    ...options,
    url: '/context/{context-id}/environment-variable'
}); };

/**
 * Remove an environment variable
 * Delete an environment variable from a context.
 */
export const deleteEnvironmentVariableFromContext = (options: Options<DeleteEnvironmentVariableFromContextData>) => { return (options?.client ?? client).delete<DeleteEnvironmentVariableFromContextResponse, DeleteEnvironmentVariableFromContextError>({
    ...options,
    url: '/context/{context-id}/environment-variable/{env-var-name}'
}); };

/**
 * Add or update an environment variable
 * Create or update an environment variable within a context. Returns information about the environment variable, not including its value.
 */
export const addEnvironmentVariableToContext = (options: Options<AddEnvironmentVariableToContextData>) => { return (options?.client ?? client).put<AddEnvironmentVariableToContextResponse, AddEnvironmentVariableToContextError>({
    ...options,
    url: '/context/{context-id}/environment-variable/{env-var-name}'
}); };

/**
 * Get summary metrics and trends for a project across it's workflows and branches
 * Get summary metrics and trends for a project at workflow and branch level.
 * Workflow runs going back at most 90 days are included in the aggregation window.
 * Trends are only supported upto last 30 days.
 * Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
 */
export const getProjectWorkflowsPageData = (options: Options<GetProjectWorkflowsPageDataData>) => { return (options?.client ?? client).get<GetProjectWorkflowsPageDataResponse, GetProjectWorkflowsPageDataError>({
    ...options,
    url: '/insights/pages/{project-slug}/summary'
}); };

/**
 * Job timeseries data
 * Get timeseries data for all jobs within a workflow. Hourly granularity data is only retained for 48 hours while daily granularity data is retained for 90 days.
 */
export const getJobTimeseries = (options: Options<GetJobTimeseriesData>) => { return (options?.client ?? client).get<GetJobTimeseriesResponse, GetJobTimeseriesError>({
    ...options,
    url: '/insights/time-series/{project-slug}/workflows/{workflow-name}/jobs'
}); };

/**
 * Get summary metrics with trends for the entire org, and for each project.
 * Gets aggregated summary metrics with trends for the entire org.
 * Also gets aggregated metrics and trends for each project belonging to the org.
 */
export const getOrgSummaryData = (options: Options<GetOrgSummaryDataData>) => { return (options?.client ?? client).get<GetOrgSummaryDataResponse, GetOrgSummaryDataError>({
    ...options,
    url: '/insights/{org-slug}/summary'
}); };

/**
 * Get all branches for a project
 * Get a list of all branches for a specified project. The list will only contain branches currently available within Insights. The maximum number of branches returned by this endpoint is 5,000.
 */
export const getAllInsightsBranches = (options: Options<GetAllInsightsBranchesData>) => { return (options?.client ?? client).get<GetAllInsightsBranchesResponse, GetAllInsightsBranchesError>({
    ...options,
    url: '/insights/{project-slug}/branches'
}); };

/**
 * Get flaky tests for a project
 * Get a list of flaky tests for a given project. Flaky tests are branch agnostic.
 * A flaky test is a test that passed and failed in the same commit.
 */
export const getFlakyTests = (options: Options<GetFlakyTestsData>) => { return (options?.client ?? client).get<GetFlakyTestsResponse, GetFlakyTestsError>({
    ...options,
    url: '/insights/{project-slug}/flaky-tests'
}); };

/**
 * Get summary metrics for a project's workflows
 * Get summary metrics for a project's workflows.  Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours.  Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
 */
export const getProjectWorkflowMetrics = (options: Options<GetProjectWorkflowMetricsData>) => { return (options?.client ?? client).get<GetProjectWorkflowMetricsResponse, GetProjectWorkflowMetricsError>({
    ...options,
    url: '/insights/{project-slug}/workflows'
}); };

/**
 * Get recent runs of a workflow
 * Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
 */
export const getProjectWorkflowRuns = (options: Options<GetProjectWorkflowRunsData>) => { return (options?.client ?? client).get<GetProjectWorkflowRunsResponse, GetProjectWorkflowRunsError>({
    ...options,
    url: '/insights/{project-slug}/workflows/{workflow-name}'
}); };

/**
 * Get summary metrics for a project workflow's jobs.
 * Get summary metrics for a project workflow's jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.
 */
export const getProjectWorkflowJobMetrics = (options: Options<GetProjectWorkflowJobMetricsData>) => { return (options?.client ?? client).get<GetProjectWorkflowJobMetricsResponse, GetProjectWorkflowJobMetricsError>({
    ...options,
    url: '/insights/{project-slug}/workflows/{workflow-name}/jobs'
}); };

/**
 * Get metrics and trends for workflows
 * Get the metrics and trends for a particular workflow on a single branch or all branches
 */
export const getWorkflowSummary = (options: Options<GetWorkflowSummaryData>) => { return (options?.client ?? client).get<GetWorkflowSummaryResponse, GetWorkflowSummaryError>({
    ...options,
    url: '/insights/{project-slug}/workflows/{workflow-name}/summary'
}); };

/**
 * Get test metrics for a project's workflows
 * Get test metrics for a project's workflows. Currently tests metrics are calculated based on 10 most recent workflow runs.
 */
export const getProjectWorkflowTestMetrics = (options: Options<GetProjectWorkflowTestMetricsData>) => { return (options?.client ?? client).get<GetProjectWorkflowTestMetricsResponse, GetProjectWorkflowTestMetricsError>({
    ...options,
    url: '/insights/{project-slug}/workflows/{workflow-name}/test-metrics'
}); };

/**
 * User Information
 * Provides information about the user that is currently signed in.
 */
export const getCurrentUser = (options?: Options) => { return (options?.client ?? client).get<GetCurrentUserResponse, GetCurrentUserError>({
    ...options,
    url: '/me'
}); };

/**
 * Collaborations
 * Provides the set of organizations of which a user is a member or a collaborator.
 *
 * The set of organizations that a user can collaborate on is composed of:
 *
 * * Organizations that the current user belongs to across VCS types (e.g. BitBucket, GitHub)
 * * The parent organization of repository that the user can collaborate on, but is not necessarily a member of
 * * The organization of the current user's account
 */
export const getCollaborations = (options?: Options) => { return (options?.client ?? client).get<GetCollaborationsResponse, GetCollaborationsError>({
    ...options,
    url: '/me/collaborations'
}); };

/**
 * Get a list of pipelines
 * Returns all pipelines for the most recently built projects (max 250) you follow in an organization.
 */
export const listPipelines = (options?: Options<ListPipelinesData>) => { return (options?.client ?? client).get<ListPipelinesResponse, ListPipelinesError>({
    ...options,
    url: '/pipeline'
}); };

/**
 * Continue a pipeline
 * Continue a pipeline from the setup phase. For information on using pipeline parameters with dynamic configuration, see the [Pipeline values and parameters](https://circleci.com/docs/pipeline-variables/#pipeline-parameters-and-dynamic-configuration) docs.
 */
export const continuePipeline = (options?: Options<ContinuePipelineData>) => { return (options?.client ?? client).post<ContinuePipelineResponse, ContinuePipelineError>({
    ...options,
    url: '/pipeline/continue'
}); };

/**
 * Get a pipeline by ID
 * Returns a pipeline by the pipeline ID.
 */
export const getPipelineById = (options: Options<GetPipelineByIdData>) => { return (options?.client ?? client).get<GetPipelineByIdResponse, GetPipelineByIdError>({
    ...options,
    url: '/pipeline/{pipeline-id}'
}); };

/**
 * Get a pipeline's configuration
 * Returns a pipeline's configuration by ID.
 */
export const getPipelineConfigById = (options: Options<GetPipelineConfigByIdData>) => { return (options?.client ?? client).get<GetPipelineConfigByIdResponse, GetPipelineConfigByIdError>({
    ...options,
    url: '/pipeline/{pipeline-id}/config'
}); };

/**
 * Get a pipeline's workflows
 * Returns a paginated list of workflows by pipeline ID.
 */
export const listWorkflowsByPipelineId = (options: Options<ListWorkflowsByPipelineIdData>) => { return (options?.client ?? client).get<ListWorkflowsByPipelineIdResponse, ListWorkflowsByPipelineIdError>({
    ...options,
    url: '/pipeline/{pipeline-id}/workflow'
}); };

/**
 * Get a project
 * Retrieves a project by project slug.
 */
export const getProjectBySlug = (options: Options<GetProjectBySlugData>) => { return (options?.client ?? client).get<GetProjectBySlugResponse, GetProjectBySlugError>({
    ...options,
    url: '/project/{project-slug}'
}); };

/**
 * Create a new checkout key
 * Not available to projects that use GitLab or GitHub App. Creates a new checkout key. This API request is only usable with a user API token.
 * Please ensure that you have authorized your account with GitHub before creating user keys.
 * This is necessary to give CircleCI the permission to create a user key associated with
 * your GitHub user account. You can find this page by visiting Project Settings > Checkout SSH Keys
 */
export const createCheckoutKey = (options: Options<CreateCheckoutKeyData>) => { return (options?.client ?? client).post<CreateCheckoutKeyResponse, CreateCheckoutKeyError>({
    ...options,
    url: '/project/{project-slug}/checkout-key'
}); };

/**
 * Get all checkout keys
 * Returns a sequence of checkout keys for `:project`.
 */
export const listCheckoutKeys = (options: Options<ListCheckoutKeysData>) => { return (options?.client ?? client).get<ListCheckoutKeysResponse, ListCheckoutKeysError>({
    ...options,
    url: '/project/{project-slug}/checkout-key'
}); };

/**
 * Delete a checkout key
 * Deletes the checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
 */
export const deleteCheckoutKey = (options: Options<DeleteCheckoutKeyData>) => { return (options?.client ?? client).delete<DeleteCheckoutKeyResponse, DeleteCheckoutKeyError>({
    ...options,
    url: '/project/{project-slug}/checkout-key/{fingerprint}'
}); };

/**
 * Get a checkout key
 * Returns an individual checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.
 */
export const getCheckoutKey = (options: Options<GetCheckoutKeyData>) => { return (options?.client ?? client).get<GetCheckoutKeyResponse, GetCheckoutKeyError>({
    ...options,
    url: '/project/{project-slug}/checkout-key/{fingerprint}'
}); };

/**
 * List all environment variables
 * Returns four 'x' characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website.
 */
export const listEnvVars = (options: Options<ListEnvVarsData>) => { return (options?.client ?? client).get<ListEnvVarsResponse, ListEnvVarsError>({
    ...options,
    url: '/project/{project-slug}/envvar'
}); };

/**
 * Create an environment variable
 * Creates a new environment variable.
 */
export const createEnvVar = (options: Options<CreateEnvVarData>) => { return (options?.client ?? client).post<CreateEnvVarResponse, CreateEnvVarError>({
    ...options,
    url: '/project/{project-slug}/envvar'
}); };

/**
 * Delete an environment variable
 * Deletes the environment variable named :name.
 */
export const deleteEnvVar = (options: Options<DeleteEnvVarData>) => { return (options?.client ?? client).delete<DeleteEnvVarResponse, DeleteEnvVarError>({
    ...options,
    url: '/project/{project-slug}/envvar/{name}'
}); };

/**
 * Get a masked environment variable
 * Returns the masked value of environment variable :name.
 */
export const getEnvVar = (options: Options<GetEnvVarData>) => { return (options?.client ?? client).get<GetEnvVarResponse, GetEnvVarError>({
    ...options,
    url: '/project/{project-slug}/envvar/{name}'
}); };

/**
 * Get job details
 * Returns job details.
 */
export const getJobDetails = (options: Options<GetJobDetailsData>) => { return (options?.client ?? client).get<GetJobDetailsResponse, GetJobDetailsError>({
    ...options,
    url: '/project/{project-slug}/job/{job-number}'
}); };

/**
 * Cancel job
 * Cancel job with a given job number.
 */
export const cancelJob = (options: Options<CancelJobData>) => { return (options?.client ?? client).post<CancelJobResponse, CancelJobError>({
    ...options,
    url: '/project/{project-slug}/job/{job-number}/cancel'
}); };

/**
 * Get all pipelines
 * Returns all pipelines for this project.
 */
export const listPipelinesForProject = (options: Options<ListPipelinesForProjectData>) => { return (options?.client ?? client).get<ListPipelinesForProjectResponse, ListPipelinesForProjectError>({
    ...options,
    url: '/project/{project-slug}/pipeline'
}); };

/**
 * Trigger a new pipeline
 * Not yet available to projects that use GitLab or GitHub App. Triggers a new pipeline on the project.
 */
export const triggerPipeline = (options: Options<TriggerPipelineData>) => { return (options?.client ?? client).post<TriggerPipelineResponse, TriggerPipelineError>({
    ...options,
    url: '/project/{project-slug}/pipeline'
}); };

/**
 * Get your pipelines
 * Returns a sequence of all pipelines for this project triggered by the user.
 */
export const listMyPipelines = (options: Options<ListMyPipelinesData>) => { return (options?.client ?? client).get<ListMyPipelinesResponse, ListMyPipelinesError>({
    ...options,
    url: '/project/{project-slug}/pipeline/mine'
}); };

/**
 * Get a pipeline by pipeline number
 * Returns a pipeline by the pipeline number.
 */
export const getPipelineByNumber = (options: Options<GetPipelineByNumberData>) => { return (options?.client ?? client).get<GetPipelineByNumberResponse, GetPipelineByNumberError>({
    ...options,
    url: '/project/{project-slug}/pipeline/{pipeline-number}'
}); };

/**
 * Create a schedule
 * Not yet available to projects that use GitLab or GitHub App. Creates a schedule and returns the created schedule.
 */
export const createSchedule = (options: Options<CreateScheduleData>) => { return (options?.client ?? client).post<CreateScheduleResponse, CreateScheduleError>({
    ...options,
    url: '/project/{project-slug}/schedule'
}); };

/**
 * Get all schedules
 * Returns all schedules for this project.
 */
export const listSchedulesForProject = (options: Options<ListSchedulesForProjectData>) => { return (options?.client ?? client).get<ListSchedulesForProjectResponse, ListSchedulesForProjectError>({
    ...options,
    url: '/project/{project-slug}/schedule'
}); };

/**
 * Get a job's artifacts
 * Returns a job's artifacts.
 */
export const getJobArtifacts = (options: Options<GetJobArtifactsData>) => { return (options?.client ?? client).get<GetJobArtifactsResponse, GetJobArtifactsError>({
    ...options,
    url: '/project/{project-slug}/{job-number}/artifacts'
}); };

/**
 * Get test metadata
 * Get test metadata for a build. In the rare case where there is more than 250MB of test data on the job, no results will be returned.
 */
export const getTests = (options: Options<GetTestsData>) => { return (options?.client ?? client).get<GetTestsResponse, GetTestsError>({
    ...options,
    url: '/project/{project-slug}/{job-number}/tests'
}); };

/**
 * Delete a schedule
 * Not yet available to projects that use GitLab or GitHub App. Deletes the schedule by id.
 */
export const deleteScheduleById = (options: Options<DeleteScheduleByIdData>) => { return (options?.client ?? client).delete<DeleteScheduleByIdResponse, DeleteScheduleByIdError>({
    ...options,
    url: '/schedule/{schedule-id}'
}); };

/**
 * Update a schedule
 * Not yet available to projects that use GitLab or GitHub App. Updates a schedule and returns the updated schedule.
 */
export const updateSchedule = (options: Options<UpdateScheduleData>) => { return (options?.client ?? client).patch<UpdateScheduleResponse, UpdateScheduleError>({
    ...options,
    url: '/schedule/{schedule-id}'
}); };

/**
 * Get a schedule
 * Get a schedule by id.
 */
export const getScheduleById = (options: Options<GetScheduleByIdData>) => { return (options?.client ?? client).get<GetScheduleByIdResponse, GetScheduleByIdError>({
    ...options,
    url: '/schedule/{schedule-id}'
}); };

/**
 * User Information
 * Provides information about the user with the given ID.
 */
export const getUser = (options: Options<GetUserData>) => { return (options?.client ?? client).get<GetUserResponse, GetUserError>({
    ...options,
    url: '/user/{id}'
}); };

/**
 * List webhooks
 * Get a list of outbound webhooks that match the given scope-type and scope-id
 */
export const getWebhooks = (options: Options<GetWebhooksData>) => { return (options?.client ?? client).get<GetWebhooksResponse, GetWebhooksError>({
    ...options,
    url: '/webhook'
}); };

/**
 * Create an outbound webhook
 * Creates an outbound webhook.
 */
export const createWebhook = (options?: Options<CreateWebhookData>) => { return (options?.client ?? client).post<CreateWebhookResponse, CreateWebhookError>({
    ...options,
    url: '/webhook'
}); };

/**
 * Delete an outbound webhook
 * Deletes an outbound webhook
 */
export const deleteWebhook = (options: Options<DeleteWebhookData>) => { return (options?.client ?? client).delete<DeleteWebhookResponse, DeleteWebhookError>({
    ...options,
    url: '/webhook/{webhook-id}'
}); };

/**
 * Get a webhook
 * Get an outbound webhook by id.
 */
export const getWebhookById = (options: Options<GetWebhookByIdData>) => { return (options?.client ?? client).get<GetWebhookByIdResponse, GetWebhookByIdError>({
    ...options,
    url: '/webhook/{webhook-id}'
}); };

/**
 * Update an outbound webhook
 * Updates an outbound webhook.
 */
export const updateWebhook = (options: Options<UpdateWebhookData>) => { return (options?.client ?? client).put<UpdateWebhookResponse, UpdateWebhookError>({
    ...options,
    url: '/webhook/{webhook-id}'
}); };

/**
 * Get a workflow
 * Returns summary fields of a workflow by ID.
 */
export const getWorkflowById = (options: Options<GetWorkflowByIdData>) => { return (options?.client ?? client).get<GetWorkflowByIdResponse, GetWorkflowByIdError>({
    ...options,
    url: '/workflow/{id}'
}); };

/**
 * Approve a job
 * Approves a pending approval job in a workflow.
 */
export const approvePendingApprovalJobById = (options: Options<ApprovePendingApprovalJobByIdData>) => { return (options?.client ?? client).post<ApprovePendingApprovalJobByIdResponse, ApprovePendingApprovalJobByIdError>({
    ...options,
    url: '/workflow/{id}/approve/{approval_request_id}'
}); };

/**
 * Cancel a workflow
 * Cancels a running workflow.
 */
export const cancelWorkflow = (options: Options<CancelWorkflowData>) => { return (options?.client ?? client).post<CancelWorkflowResponse, CancelWorkflowError>({
    ...options,
    url: '/workflow/{id}/cancel'
}); };

/**
 * Get a workflow's jobs
 * Returns a sequence of jobs for a workflow.
 */
export const listWorkflowJobs = (options: Options<ListWorkflowJobsData>) => { return (options?.client ?? client).get<ListWorkflowJobsResponse, ListWorkflowJobsError>({
    ...options,
    url: '/workflow/{id}/job'
}); };

/**
 * Rerun a workflow
 * Reruns a workflow.
 */
export const rerunWorkflow = (options: Options<RerunWorkflowData>) => { return (options?.client ?? client).post<RerunWorkflowResponse, RerunWorkflowError>({
    ...options,
    url: '/workflow/{id}/rerun'
}); };

/**
 * Delete org-level claims
 * Deletes org-level custom claims of OIDC identity tokens
 */
export const deleteOrgClaims = (options: Options<DeleteOrgClaimsData>) => { return (options?.client ?? client).delete<DeleteOrgClaimsResponse, DeleteOrgClaimsError>({
    ...options,
    url: '/org/{orgID}/oidc-custom-claims'
}); };

/**
 * Get org-level claims
 * Fetches org-level custom claims of OIDC identity tokens
 */
export const getOrgClaims = (options: Options<GetOrgClaimsData>) => { return (options?.client ?? client).get<GetOrgClaimsResponse, GetOrgClaimsError>({
    ...options,
    url: '/org/{orgID}/oidc-custom-claims'
}); };

/**
 * Patch org-level claims
 * Creates/Updates org-level custom claims of OIDC identity tokens
 */
export const patchOrgClaims = (options: Options<PatchOrgClaimsData>) => { return (options?.client ?? client).patch<PatchOrgClaimsResponse, PatchOrgClaimsError>({
    ...options,
    url: '/org/{orgID}/oidc-custom-claims'
}); };

/**
 * Delete project-level claims
 * Deletes project-level custom claims of OIDC identity tokens
 */
export const deleteProjectClaims = (options: Options<DeleteProjectClaimsData>) => { return (options?.client ?? client).delete<DeleteProjectClaimsResponse, DeleteProjectClaimsError>({
    ...options,
    url: '/org/{orgID}/project/{projectID}/oidc-custom-claims'
}); };

/**
 * Get project-level claims
 * Fetches project-level custom claims of OIDC identity tokens
 */
export const getProjectClaims = (options: Options<GetProjectClaimsData>) => { return (options?.client ?? client).get<GetProjectClaimsResponse, GetProjectClaimsError>({
    ...options,
    url: '/org/{orgID}/project/{projectID}/oidc-custom-claims'
}); };

/**
 * Patch project-level claims
 * Creates/Updates project-level custom claims of OIDC identity tokens
 */
export const patchProjectClaims = (options: Options<PatchProjectClaimsData>) => { return (options?.client ?? client).patch<PatchProjectClaimsResponse, PatchProjectClaimsError>({
    ...options,
    url: '/org/{orgID}/project/{projectID}/oidc-custom-claims'
}); };

/**
 * Retrieves the owner's decision audit logs.
 * This endpoint will return a list of decision audit logs that were made using this owner's policies.
 */
export const getDecisionLogs = (options: Options<GetDecisionLogsData>) => { return (options?.client ?? client).get<GetDecisionLogsResponse, GetDecisionLogsError>({
    ...options,
    url: '/owner/{ownerID}/context/{context}/decision'
}); };

/**
 * Makes a decision
 * This endpoint will evaluate input data (config+metadata) against owner's stored policies and return a decision.
 */
export const makeDecision = (options: Options<MakeDecisionData>) => { return (options?.client ?? client).post<MakeDecisionResponse, MakeDecisionError>({
    ...options,
    url: '/owner/{ownerID}/context/{context}/decision'
}); };

/**
 * Get the decision settings
 * This endpoint retrieves the current decision settings (eg enable/disable policy evaluation)
 */
export const getDecisionSettings = (options: Options<GetDecisionSettingsData>) => { return (options?.client ?? client).get<GetDecisionSettingsResponse, GetDecisionSettingsError>({
    ...options,
    url: '/owner/{ownerID}/context/{context}/decision/settings'
}); };

/**
 * Set the decision settings
 * This endpoint allows modifying decision settings (eg enable/disable policy evaluation)
 */
export const setDecisionSettings = (options: Options<SetDecisionSettingsData>) => { return (options?.client ?? client).patch<SetDecisionSettingsResponse, SetDecisionSettingsError>({
    ...options,
    url: '/owner/{ownerID}/context/{context}/decision/settings'
}); };

/**
 * Retrieves the owner's decision audit log by given decisionID
 * This endpoint will retrieve a decision for a given decision log ID
 */
export const getDecisionLog = (options: Options<GetDecisionLogData>) => { return (options?.client ?? client).get<GetDecisionLogResponse, GetDecisionLogError>({
    ...options,
    url: '/owner/{ownerID}/context/{context}/decision/{decisionID}'
}); };

/**
 * Retrieves Policy Bundle for a given decision log ID
 * This endpoint will retrieve a policy bundle for a given decision log ID
 */
export const getDecisionLogPolicyBundle = (options: Options<GetDecisionLogPolicyBundleData>) => { return (options?.client ?? client).get<GetDecisionLogPolicyBundleResponse, GetDecisionLogPolicyBundleError>({
    ...options,
    url: '/owner/{ownerID}/context/{context}/decision/{decisionID}/policy-bundle'
}); };

/**
 * Retrieves Policy Bundle
 * This endpoint will retrieve a policy bundle
 */
export const getPolicyBundle = (options: Options<GetPolicyBundleData>) => { return (options?.client ?? client).get<GetPolicyBundleResponse, GetPolicyBundleError>({
    ...options,
    url: '/owner/{ownerID}/context/{context}/policy-bundle'
}); };

/**
 * Creates policy bundle for the context
 * This endpoint replaces the current policy bundle with the provided policy bundle
 */
export const createPolicyBundle = (options: Options<CreatePolicyBundleData>) => { return (options?.client ?? client).post<CreatePolicyBundleResponse, CreatePolicyBundleError>({
    ...options,
    url: '/owner/{ownerID}/context/{context}/policy-bundle'
}); };

/**
 * Retrieves a policy document
 * This endpoint will retrieve a policy document.
 */
export const getPolicyDocument = (options: Options<GetPolicyDocumentData>) => { return (options?.client ?? client).get<GetPolicyDocumentResponse, GetPolicyDocumentError>({
    ...options,
    url: '/owner/{ownerID}/context/{context}/policy-bundle/{policyName}'
}); };

/**
 * 🧪 Get context restrictions
 * [__EXPERIMENTAL__] Gets a list of project restrictions associated with a context.
 */
export const getContextRestrictions = (options: Options<GetContextRestrictionsData>) => { return (options?.client ?? client).get<GetContextRestrictionsResponse, GetContextRestrictionsError>({
    ...options,
    url: '/context/{context_id}/restrictions'
}); };

/**
 * 🧪 Create context restriction
 * [__EXPERIMENTAL__] Creates project restriction on a context.
 */
export const createContextRestriction = (options: Options<CreateContextRestrictionData>) => { return (options?.client ?? client).post<CreateContextRestrictionResponse, CreateContextRestrictionError>({
    ...options,
    url: '/context/{context_id}/restrictions'
}); };

/**
 * 🧪 Delete context restriction
 * [__EXPERIMENTAL__] Deletes a project restriction on a context.
 */
export const deleteContextRestriction = (options: Options<DeleteContextRestrictionData>) => { return (options?.client ?? client).delete<DeleteContextRestrictionResponse, DeleteContextRestrictionError>({
    ...options,
    url: '/context/{context_id}/restrictions/{restriction_id}'
}); };

/**
 * 🧪 Create a project
 * [__EXPERIMENTAL__]  Creates a new CircleCI project, and returns a list of the default advanced settings. Can only be called on a repo with a main branch and an existing config.yml file. Not yet available to projects that use GitLab or GitHub App.
 */
export const createProject = (options: Options<CreateProjectData>) => { return (options?.client ?? client).post<CreateProjectResponse, CreateProjectError>({
    ...options,
    url: '/project/{provider}/{organization}/{project}'
}); };

/**
 * 🧪 Get project settings
 * [__EXPERIMENTAL__] Returns a list of the advanced settings for a CircleCI project, whether enabled (true) or not (false).
 */
export const getProjectSettings = (options: Options<GetProjectSettingsData>) => { return (options?.client ?? client).get<GetProjectSettingsResponse, GetProjectSettingsError>({
    ...options,
    url: '/project/{provider}/{organization}/{project}/settings'
}); };

/**
 * 🧪 Update project settings
 * [__EXPERIMENTAL__] Updates one or more of the advanced settings for a CircleCI project.
 */
export const patchProjectSettings = (options: Options<PatchProjectSettingsData>) => { return (options?.client ?? client).patch<PatchProjectSettingsResponse, PatchProjectSettingsError>({
    ...options,
    url: '/project/{provider}/{organization}/{project}/settings'
}); };

/**
 * Create a usage export
 * Submits a request to create a usage export for an organization.
 */
export const createUsageExport = (options: Options<CreateUsageExportData>) => { return (options?.client ?? client).post<CreateUsageExportResponse, CreateUsageExportError>({
    ...options,
    url: '/organizations/{org_id}/usage_export_job'
}); };

/**
 * Get a usage export
 * Gets a usage export for an organization.
 */
export const getUsageExport = (options: Options<GetUsageExportData>) => { return (options?.client ?? client).get<GetUsageExportResponse, GetUsageExportError>({
    ...options,
    url: '/organizations/{org_id}/usage_export_job/{usage_export_job_id}'
}); };