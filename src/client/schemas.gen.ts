// This file is auto-generated by @hey-api/openapi-ts

export const $ClaimResponse = {
    properties: {
        audience: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        audience_updated_at: {
            format: 'date-time',
            type: 'string'
        },
        org_id: {
            format: 'uuid',
            type: 'string'
        },
        project_id: {
            format: 'uuid',
            type: 'string'
        },
        ttl: {
            '$ref': '#/components/schemas/JSONDuration'
        },
        ttl_updated_at: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['org_id'],
    type: 'object'
} as const;

export const $JSONDuration = {
    pattern: '^([0-9]+(ms|s|m|h|d|w)){1,7}$',
    type: 'string'
} as const;

export const $PatchClaimsRequest = {
    properties: {
        audience: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        ttl: {
            '$ref': '#/components/schemas/JSONDuration'
        }
    },
    type: 'object'
} as const;

export const $BundleDiff = {
    properties: {
        created: {
            items: {
                description: 'policy names',
                type: 'string'
            },
            type: 'array'
        },
        deleted: {
            items: {
                description: 'policy names',
                type: 'string'
            },
            type: 'array'
        },
        modified: {
            items: {
                description: 'policy names',
                type: 'string'
            },
            type: 'array'
        }
    },
    type: 'object'
} as const;

export const $BundlePayload = {
    properties: {
        policies: {
            additionalProperties: {
                description: 'policy content',
                type: 'string'
            },
            type: 'object'
        }
    },
    type: 'object'
} as const;

export const $Decision = {
    properties: {
        enabled_rules: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        hard_failures: {
            items: {
                '$ref': '#/components/schemas/Violation'
            },
            type: 'array'
        },
        reason: {
            type: 'string'
        },
        soft_failures: {
            items: {
                '$ref': '#/components/schemas/Violation'
            },
            type: 'array'
        },
        status: {
            type: 'string'
        }
    },
    required: ['status'],
    type: 'object'
} as const;

export const $DecisionLog = {
    properties: {
        created_at: {
            format: 'date-time',
            type: 'string'
        },
        decision: {
            '$ref': '#/components/schemas/Decision'
        },
        id: {
            format: 'uuid',
            type: 'string'
        },
        metadata: {
            properties: {
                build_number: {
                    type: 'integer'
                },
                project_id: {
                    format: 'uuid',
                    type: 'string'
                },
                ssh_rerun: {
                    type: 'boolean'
                },
                vcs: {
                    properties: {
                        branch: {
                            type: 'string'
                        },
                        origin_repository_url: {
                            type: 'string'
                        },
                        release_tag: {
                            type: 'string'
                        },
                        target_repository_url: {
                            type: 'string'
                        }
                    },
                    type: 'object'
                }
            },
            type: 'object'
        },
        policies: {
            additionalProperties: {
                maxLength: 128,
                minLength: 128,
                type: 'string'
            },
            description: 'policy-name-to-hash-map',
            example: {
                policy_name1: '1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f5302860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75',
                policy_name2: '5267768822ee624d48fce15ec5ca79cbd602cb7f4c2157a516556991f22ef8c7b5ef7b18d1ff41c59370efb0858651d44a936c11b7b144c48fe04df3c6a3e8da'
            },
            type: 'object'
        },
        time_taken_ms: {
            type: 'integer'
        }
    },
    type: 'object'
} as const;

export const $DecisionSettings = {
    properties: {
        enabled: {
            type: 'boolean'
        }
    },
    type: 'object'
} as const;

export const $Policy = {
    properties: {
        content: {
            type: 'string'
        },
        created_at: {
            format: 'date-time',
            type: 'string'
        },
        created_by: {
            type: 'string'
        },
        name: {
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const $PolicyBundle = {
    additionalProperties: {
        items: {
            '$ref': '#/components/schemas/Policy'
        }
    },
    type: 'object'
} as const;

export const $Violation = {
    properties: {
        reason: {
            type: 'string'
        },
        rule: {
            type: 'string'
        }
    },
    required: ['rule', 'reason'],
    type: 'object'
} as const;

export const $context_project_restrictions_list = {
    type: 'object',
    additionalProperties: false,
    properties: {
        items: {
            type: 'array',
            items: {
                additionalProperties: false,
                properties: {
                    context_id: {
                        type: 'string',
                        format: 'uuid',
                        description: 'UUID of the context'
                    },
                    id: {
                        type: 'string',
                        format: 'uuid',
                        description: 'UUID of the restriction'
                    },
                    project_id: {
                        type: 'string',
                        format: 'uuid',
                        description: `Deprecated - For "project" restrictions read the project ID from
"restriction_value" instead.

UUID of the project used in a project restriction.
`,
                        deprecated: true
                    },
                    name: {
                        type: 'string',
                        description: `Contains a human-readable reference for the restriction. For
"project" restrictions this is the name of the project.

May be null.
`
                    },
                    restriction_type: {
                        type: 'string',
                        description: 'Type of the restriction',
                        enum: ['project', 'expression']
                    },
                    restriction_value: {
                        type: 'string',
                        description: 'Value used to evaluate the restriction'
                    }
                }
            }
        },
        next_page_token: {
            type: 'string',
            nullable: true,
            description: 'Token that can be used to retrieve next page of results'
        }
    }
} as const;

export const $project_settings = {
    type: 'object',
    additionalProperties: false,
    properties: {
        advanced: {
            type: 'object',
            additionalProperties: false,
            properties: {
                autocancel_builds: {
                    type: 'boolean',
                    description: 'Except for the default branch, cancel running pipelines on a branch when a new pipeline starts on that branch.'
                },
                build_fork_prs: {
                    type: 'boolean',
                    description: 'Run builds for pull requests from forks.'
                },
                build_prs_only: {
                    type: 'boolean',
                    description: 'Once enabled, we will only build branches that have associated pull requests open.'
                },
                disable_ssh: {
                    type: 'boolean',
                    description: 'When set to true, job re-runs with SSH debugging access will be disabled for the project.'
                },
                forks_receive_secret_env_vars: {
                    type: 'boolean',
                    description: "Run builds for forked pull requests with this project's configuration, environment variables, and secrets."
                },
                oss: {
                    type: 'boolean',
                    description: 'Free and Open Source. Enabling this grants additional credits, and lets others see your builds, both through the web UI and the API.'
                },
                set_github_status: {
                    type: 'boolean',
                    description: "Report the status of every pushed commit to GitHub's status API. Updates reported per job."
                },
                setup_workflows: {
                    type: 'boolean',
                    description: 'Enabling allows you to conditionally trigger configurations outside of the primary `.circleci` parent directory.'
                },
                write_settings_requires_admin: {
                    type: 'boolean',
                    description: 'Whether updating these settings requires a user to be an organization administrator. When disabled, updating settings can be done by any member.'
                },
                pr_only_branch_overrides: {
                    type: 'array',
                    items: {
                        type: 'string'
                    },
                    description: 'This field is used in conjunction with the `build_prs_only`, it allows you to specify a list of branches that will always triger a build. The value passed will overwrite the existing value.'
                }
            }
        }
    }
} as const;

export const $restriction_created = {
    additionalProperties: false,
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            description: 'UUID of the project restriction'
        },
        project_id: {
            type: 'string',
            format: 'uuid',
            description: `Deprecated - For "project" restrictions read the project ID from
"restriction_value" instead.

UUID of the project used in a project restriction.
`
        },
        name: {
            type: 'string',
            description: `Contains a human-readable reference for the restriction. For
"project" restrictions this is the name of the project.

May be null.
`
        },
        restriction_type: {
            type: 'string',
            description: 'Type of the restriction',
            enum: ['project', 'expression']
        },
        restriction_value: {
            type: 'string',
            description: 'Value used to evaluate the restriction'
        }
    }
} as const;

export const $restriction_deleted = {
    additionalProperties: false,
    properties: {
        message: {
            type: 'string',
            description: 'Response message'
        }
    }
} as const;

export const $usage_export_job = {
    type: 'object',
    additionalProperties: false,
    properties: {
        usage_export_job_id: {
            type: 'string',
            format: 'uuid'
        },
        state: {
            type: 'string',
            enum: ['created', 'processing', 'failed', 'completed']
        },
        start: {
            type: 'string',
            format: 'date-time'
        },
        end: {
            type: 'string',
            format: 'date-time'
        },
        download_urls: {
            description: 'A list of pre signed urls that the client can use to download the results of a Usage Export.',
            type: 'array',
            items: {
                additionalProperties: false,
                type: 'string',
                format: 'uri'
            }
        }
    },
    required: ['usage_export_job_id', 'state', 'start', 'end', 'download_urls']
} as const;

export const $get_usage_export_job_status = {
    type: 'object',
    additionalProperties: false,
    properties: {
        usage_export_job_id: {
            type: 'string',
            format: 'uuid'
        },
        state: {
            type: 'string',
            enum: ['created', 'processing', 'failed', 'completed']
        },
        download_urls: {
            description: 'A list of pre signed urls that the client can use to download the results of a Usage Export.',
            type: 'array',
            items: {
                additionalProperties: false,
                type: 'string',
                format: 'uri'
            }
        },
        error_reason: {
            type: 'string'
        }
    },
    required: ['usage_export_job_id', 'state', 'download_urls']
} as const;